---
title: "Pixar Films."
subtitle: "TidyTuesday Python Challenge: A collaboration with Posit"
---

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import textwrap

# Load the data 

pixar_films = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/pixar_films.csv')
public_response = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/public_response.csv')


```

```{python}
# Clean data

# Sort films by Rotten Tomatoes score
sorted_films = public_response.sort_values(by="rotten_tomatoes", ascending=False)

# Set the plot size
plt.figure(figsize=(12, 8))

# Create a lollipop plot for Rotten Tomatoes score
plt.scatter(sorted_films["rotten_tomatoes"], sorted_films["film"], color='orange', s=100, label="Rotten Tomatoes")

# Create a lollipop plot for Metacritic score
plt.scatter(sorted_films["metacritic"], sorted_films["film"], color='green', s=100, label="Metacritic")

# Create a lollipop plot for Critics' Choice score
plt.scatter(sorted_films["critics_choice"], sorted_films["film"], color='blue', s=100, label="Critics' Choice")

# Adding titles and labels
plt.title("Comparison of Pixar Films' Scores", fontsize=16)
plt.xlabel("Score (%)", fontsize=12)
plt.ylabel("Film", fontsize=12)

# Display legend
plt.legend()

# Display the plot
plt.show()






import matplotlib.pyplot as plt
import seaborn as sns

# Sort films by Rotten Tomatoes score (or you can choose any other sorting strategy)
sorted_films = public_response.sort_values(by="rotten_tomatoes", ascending=False)

# Set up the figure and axis
plt.figure(figsize=(14, 8))

# Plot three lollipops for each film (one for each score)
for i, row in sorted_films.iterrows():
    # Rotten Tomatoes lollipop (positive side)
    plt.plot([i - 0.2, i + 0.2], [row['rotten_tomatoes'], row['rotten_tomatoes']], color='orange', lw=2)
    plt.scatter(i, row['rotten_tomatoes'], color='orange', s=100, label="Rotten Tomatoes" if i == 0 else "")

    # Metacritic lollipop (centered)
    plt.plot([i - 0.2, i + 0.2], [row['metacritic'], row['metacritic']], color='green', lw=2)
    plt.scatter(i, row['metacritic'], color='green', s=100, label="Metacritic" if i == 0 else "")

    # Critics' Choice lollipop (negative side)
    plt.plot([i - 0.2, i + 0.2], [row['critics_choice'], row['critics_choice']], color='blue', lw=2)
    plt.scatter(i, row['critics_choice'], color='blue', s=100, label="Critics' Choice" if i == 0 else "")

# Adding titles and labels
plt.title("Comparison of Pixar Films' Scores", fontsize=16)
plt.xlabel("Film", fontsize=12)
plt.ylabel("Score", fontsize=12)

# Adding the film names to the x-axis
plt.xticks(range(len(sorted_films)), sorted_films['film'], rotation=90, ha="center")

# Display the legend
plt.legend()

# Adjust plot layout and display
plt.tight_layout()
plt.show()









# my_col = ['#3a5cbc', '#9291be', '#c15451', '#6F99AD', '#DF8F44', '#80796B']


# Add labels and title
plt.xlabel("")
plt.ylabel("")
plt.title(
    "Examining Racial and Ethnic Disparities in Reproductive Medicine", 
    fontsize = 15,
    pad = 35,
    x = 0.5
    )

# Add the subtitle for clarification
plt.text(x = 0.5, y = 1.045, 
        s = "Analyzing publications from top Ob/Gyn journals, \nwith point size reflecting the number of studies on racial and ethnic disparities.", 
        ha = 'center', 
        va = 'center', 
        fontsize = 10, 
        style = 'italic', 
        color = "#8C8380",
        transform = plt.gca().transAxes)

# Add a caption to the plot
plt.text(
    x = 0.85, y = -0.1,  # Adjust x, y to position the caption below the plot
    s = "Source: Academic Literature Dataset | Graphic: Natasa Anastasiadou", 
    ha = 'center', 
    va = 'center', 
    fontsize = 7, 
    style = 'italic', 
    color = "#8C8380", 
    transform = plt.gca().transAxes
)


# plt.xticks(rotation=45)
plt.xticks(ticks=sorted(df['year'].unique()), rotation = 90, fontsize = 8)
plt.yticks(fontsize = 8)


plt.show()

plt.savefig("plot.png", dpi = 600, bbox_inches='tight') 
```
